/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import name.kropp.intellij.makefile.psi.MakefileTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREREQUISITES = 2;
  public static final int ELSE = 4;
  public static final int INCLUDES = 6;
  public static final int SOURCE = 8;
  public static final int DEFINE = 10;
  public static final int DEFINEBODY = 12;
  public static final int CONDITIONALS = 14;
  public static final int FUNCTION = 16;
  public static final int EXPORT = 18;
  public static final int EXPORTVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 
    16, 17, 18, 19, 20, 21
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\41\1\1\2\0\1\4\22\0\1\2\1\37\1\0\1\5\1\6\3\0\1\7\1\42\1\0\1\40\1\0"+
    "\1\45\14\0\1\33\1\34\1\0\1\36\1\0\1\37\1\32\33\0\1\3\4\0\1\14\1\31\1\25\1"+
    "\24\1\10\1\20\1\17\1\22\1\16\2\0\1\23\1\0\1\15\1\12\1\26\1\47\1\11\1\21\1"+
    "\27\1\30\1\46\1\13\1\50\2\0\1\43\1\35\1\44\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\26\0\1\1\2\2\1\3\10\1\1\4\1\5\1\6"+
    "\1\1\1\2\2\1\1\7\1\10\4\1\1\11\1\12"+
    "\1\13\3\14\1\1\1\6\1\15\1\16\1\2\1\6"+
    "\1\15\1\2\1\15\1\17\1\6\1\20\1\6\1\1"+
    "\1\21\1\6\3\21\1\22\1\2\2\22\1\23\1\3"+
    "\1\6\1\24\1\23\1\6\1\25\1\6\1\1\1\3"+
    "\1\26\14\1\1\27\2\1\1\0\2\30\3\1\1\31"+
    "\1\0\1\1\1\0\2\15\3\0\3\21\1\0\2\22"+
    "\1\3\1\26\1\23\2\0\1\23\1\0\1\1\1\0"+
    "\5\1\1\32\14\1\2\33\3\1\5\0\5\1\5\15"+
    "\1\33\6\21\1\33\5\22\1\33\5\0\1\32\1\33"+
    "\7\1\1\34\3\1\1\35\12\1\6\0\6\1\6\15"+
    "\7\21\6\22\6\0\6\1\1\36\3\1\1\37\1\1"+
    "\1\40\3\1\1\41\3\1\6\0\6\1\6\15\6\21"+
    "\1\42\6\22\6\0\3\1\1\43\2\1\1\44\2\1"+
    "\1\45\1\46\2\1\1\47\2\1\3\0\1\43\2\0"+
    "\3\1\1\43\2\1\3\15\1\43\2\15\3\21\1\43"+
    "\2\21\3\22\1\43\2\22\3\0\1\43\2\0\1\50"+
    "\2\1\1\51\2\1\1\52\1\53\2\1\1\54\1\50"+
    "\2\0\1\51\1\0\1\50\2\1\1\51\1\1\1\50"+
    "\2\15\1\51\1\15\1\50\2\21\1\51\1\21\1\50"+
    "\2\22\1\51\1\22\1\50\2\0\1\51\1\0\3\1"+
    "\1\55\1\56\1\57\3\0\3\1\3\15\3\21\3\22"+
    "\3\0\1\60\2\1\1\60\2\0\1\60\2\1\1\60"+
    "\2\15\1\60\2\21\1\60\2\22\1\60\2\0\1\61"+
    "\1\1\1\61\1\0\1\61\1\1\1\61\1\15\1\61"+
    "\1\21\1\61\1\22\1\61\1\0\7\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u0386\0\u0386\0\u059b\0\u07b0\0\u07d9\0\u0802\0\u059b\0\u082b"+
    "\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973"+
    "\0\u059b\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u059b"+
    "\0\u0bda\0\u0c03\0\u059b\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0"+
    "\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u05c4\0\u0ebc\0\u0ee5\0\u0f0e\0\u059b"+
    "\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u05c4\0\u0fdb\0\u1004\0\u082b"+
    "\0\u102d\0\u1056\0\u1056\0\u099c\0\u09ee\0\u107f\0\u10a8\0\u10d1"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u059b\0\u119e\0\u11c7"+
    "\0\u11f0\0\u0c2c\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6"+
    "\0\u130f\0\u0386\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405"+
    "\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u0386\0\u059b"+
    "\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643"+
    "\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b"+
    "\0\u17b4\0\u17dd\0\u082b\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa"+
    "\0\u18d3\0\u09ee\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u0abb"+
    "\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u059b\0\u0b5f\0\u1a96"+
    "\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u0386\0\u1bb5"+
    "\0\u1bde\0\u1c07\0\u0386\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4"+
    "\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64"+
    "\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac"+
    "\0\u20d5\0\u20fe\0\u2127\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4"+
    "\0\u221d\0\u2246\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c"+
    "\0\u2365\0\u238e\0\u23b7\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484"+
    "\0\u0386\0\u24ad\0\u24d6\0\u24ff\0\u0386\0\u2528\0\u0386\0\u2551"+
    "\0\u257a\0\u25a3\0\u0386\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670"+
    "\0\u2699\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8"+
    "\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900"+
    "\0\u2929\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u09ee\0\u2a1f"+
    "\0\u2a48\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67"+
    "\0\u2b90\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u1219\0\u2c86"+
    "\0\u2caf\0\u0386\0\u2cd8\0\u2d01\0\u0386\0\u0386\0\u2d2a\0\u2d53"+
    "\0\u0386\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u2e20\0\u059b\0\u2e49"+
    "\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u0386\0\u2f16\0\u2f3f\0\u2f68"+
    "\0\u2f91\0\u2fba\0\u082b\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087"+
    "\0\u09ee\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u0abb\0\u317d"+
    "\0\u31a6\0\u31cf\0\u31f8\0\u3221\0\u1242\0\u324a\0\u3273\0\u1219"+
    "\0\u329c\0\u32c5\0\u1219\0\u32ee\0\u3317\0\u0386\0\u0386\0\u3340"+
    "\0\u3369\0\u0386\0\u059b\0\u3392\0\u33bb\0\u059b\0\u33e4\0\u0386"+
    "\0\u340d\0\u3436\0\u0386\0\u345f\0\u082b\0\u3488\0\u34b1\0\u082b"+
    "\0\u34da\0\u09ee\0\u3503\0\u352c\0\u09ee\0\u3555\0\u0abb\0\u357e"+
    "\0\u35a7\0\u0abb\0\u35d0\0\u1242\0\u35f9\0\u3622\0\u1242\0\u364b"+
    "\0\u3674\0\u369d\0\u36c6\0\u0386\0\u0386\0\u0386\0\u36ef\0\u3718"+
    "\0\u3741\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e\0\u3837\0\u3860"+
    "\0\u3889\0\u38b2\0\u38db\0\u3904\0\u392d\0\u3956\0\u397f\0\u39a8"+
    "\0\u1219\0\u39d1\0\u39fa\0\u059b\0\u3a23\0\u3a4c\0\u0386\0\u3a75"+
    "\0\u3a9e\0\u082b\0\u3ac7\0\u3af0\0\u09ee\0\u3b19\0\u3b42\0\u0abb"+
    "\0\u3b6b\0\u3b94\0\u1242\0\u3bbd\0\u3be6\0\u1219\0\u3c0f\0\u059b"+
    "\0\u3c38\0\u0386\0\u3c61\0\u082b\0\u3c8a\0\u09ee\0\u3cb3\0\u0abb"+
    "\0\u3cdc\0\u1242\0\u3d05\0\u1219\0\u059b\0\u0386\0\u082b\0\u09ee"+
    "\0\u0abb\0\u1242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\27\1\30\1\32\1\33\1\27"+
    "\1\34\1\27\1\35\3\27\1\36\2\27\1\37\2\27"+
    "\1\40\1\27\1\41\1\27\1\42\2\27\1\43\2\27"+
    "\1\44\1\45\1\46\1\47\3\27\1\37\1\50\3\27"+
    "\1\30\1\31\1\27\1\30\1\32\1\33\1\27\1\34"+
    "\1\27\1\35\3\27\1\36\2\27\1\37\2\27\1\40"+
    "\1\27\1\41\1\27\1\42\1\27\1\51\1\43\2\27"+
    "\1\44\1\45\1\46\1\52\3\27\1\37\1\50\3\27"+
    "\1\53\1\31\1\54\1\53\1\32\1\33\1\27\1\55"+
    "\1\27\1\56\13\27\1\57\4\27\1\60\1\61\1\62"+
    "\1\44\1\45\1\46\1\47\10\27\1\53\1\31\1\54"+
    "\1\53\1\32\1\33\1\27\1\55\1\27\1\56\13\27"+
    "\1\57\3\27\1\51\1\60\1\61\1\62\1\44\1\45"+
    "\1\46\1\47\7\27\1\63\1\53\1\31\1\63\1\53"+
    "\1\32\1\64\43\63\1\53\1\31\1\63\1\53\1\32"+
    "\1\64\23\63\1\65\16\63\1\27\1\53\1\31\1\27"+
    "\1\53\1\32\1\66\24\27\1\67\2\27\2\67\1\27"+
    "\1\47\10\27\1\53\1\31\1\27\1\53\1\32\1\66"+
    "\23\27\1\51\1\67\2\27\2\67\1\27\1\47\7\27"+
    "\1\70\1\71\1\72\1\73\1\71\1\32\1\74\32\70"+
    "\1\75\10\70\1\71\1\72\1\73\1\71\1\32\1\74"+
    "\23\70\1\76\6\70\1\75\7\70\1\27\1\77\1\31"+
    "\1\27\1\77\1\32\1\66\24\27\1\100\2\27\1\101"+
    "\1\102\1\103\1\47\10\27\1\77\1\31\1\27\1\77"+
    "\1\32\1\66\23\27\1\51\1\100\2\27\1\101\1\102"+
    "\1\103\1\47\7\27\1\104\1\30\1\104\1\105\1\30"+
    "\1\32\1\106\1\104\1\107\41\104\1\30\1\104\1\105"+
    "\1\30\1\32\1\106\1\104\1\107\21\104\1\110\16\104"+
    "\1\111\1\71\1\112\1\111\1\71\1\32\1\113\43\111"+
    "\1\71\1\112\1\111\1\71\1\32\1\113\23\111\1\114"+
    "\16\111\5\115\1\116\1\117\33\115\1\120\13\115\1\116"+
    "\1\117\23\115\1\121\7\115\1\120\6\115\1\27\1\53"+
    "\1\31\1\27\1\53\1\32\1\33\24\27\1\122\2\27"+
    "\1\123\1\124\1\125\1\47\10\27\1\53\1\31\1\27"+
    "\1\53\1\32\1\33\23\27\1\51\1\122\2\27\1\123"+
    "\1\124\1\125\1\47\7\27\1\70\1\53\1\72\1\73"+
    "\1\53\1\32\1\74\32\70\1\75\10\70\1\53\1\72"+
    "\1\73\1\53\1\32\1\74\23\70\1\76\6\70\1\75"+
    "\7\70\1\27\2\0\1\27\2\0\25\27\1\0\2\27"+
    "\2\0\1\27\1\0\7\27\1\0\1\30\2\0\1\30"+
    "\46\0\1\31\46\0\1\126\1\0\2\126\1\0\1\127"+
    "\43\126\1\27\2\0\1\27\2\0\1\27\1\130\23\27"+
    "\1\0\2\27\2\0\1\27\1\0\1\27\1\131\6\27"+
    "\2\0\1\27\2\0\7\27\1\132\5\27\1\133\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\6\27\1\134\1\27"+
    "\2\0\1\27\2\0\25\27\1\0\2\27\2\0\1\27"+
    "\1\0\4\27\1\135\3\27\2\0\1\27\2\0\7\27"+
    "\1\136\2\27\1\137\12\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\10\27\1\140\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\2\27\1\141\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\3\27\1\142\21\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\7\27\1\143\15\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\33\0\1\144\2\0\1\44\121\0\1\44"+
    "\12\0\1\27\2\0\1\27\2\0\25\27\1\0\2\27"+
    "\1\44\1\0\1\27\1\0\7\27\41\0\1\47\7\0"+
    "\1\27\2\0\1\27\2\0\20\27\1\145\4\27\1\0"+
    "\2\27\2\0\1\27\1\0\7\27\1\146\2\0\1\146"+
    "\1\0\1\147\24\146\1\27\1\147\2\146\2\147\1\146"+
    "\1\147\7\146\41\0\1\52\10\0\1\53\2\0\1\53"+
    "\44\0\1\27\1\150\1\0\1\27\1\151\1\0\25\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\25\27\1\0\2\27\2\0\1\27\1\0\6\27"+
    "\1\152\1\27\2\0\1\27\2\0\25\27\1\0\2\27"+
    "\2\0\1\27\1\0\4\27\1\153\3\27\2\0\1\27"+
    "\2\0\3\27\1\154\21\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\33\0\1\155\2\0\1\44\21\0\1\156"+
    "\41\0\1\147\2\0\1\147\1\0\25\147\1\0\16\147"+
    "\1\27\2\0\1\27\2\0\1\27\1\157\23\27\1\0"+
    "\2\27\2\0\1\27\1\0\7\27\1\70\1\0\1\70"+
    "\1\160\1\0\44\70\1\0\1\71\2\0\1\71\44\0"+
    "\1\70\1\0\1\72\1\160\1\0\45\70\1\150\1\70"+
    "\1\160\1\151\45\70\1\0\1\70\1\160\1\0\2\70"+
    "\1\161\42\70\1\0\1\70\1\160\1\0\34\70\1\75"+
    "\7\70\1\162\1\0\1\70\1\163\1\0\25\162\1\70"+
    "\16\162\1\0\1\77\2\0\1\77\77\0\1\164\2\0"+
    "\1\101\50\0\1\101\12\0\1\27\2\0\1\27\2\0"+
    "\25\27\1\0\2\27\1\101\1\0\1\27\1\0\7\27"+
    "\1\104\1\0\1\104\1\165\1\0\45\104\1\150\1\104"+
    "\1\165\1\151\45\104\1\0\1\104\1\165\1\0\2\104"+
    "\1\166\42\104\1\0\1\104\1\165\1\0\10\104\1\167"+
    "\33\104\1\170\1\0\1\104\1\171\1\0\25\170\1\104"+
    "\16\170\1\111\1\0\2\111\2\0\44\111\1\0\1\112"+
    "\1\111\2\0\44\111\1\0\2\111\2\0\1\111\1\172"+
    "\41\111\1\173\1\0\1\111\1\173\1\0\1\147\24\173"+
    "\1\111\16\173\6\115\1\0\33\115\1\0\6\115\1\174"+
    "\1\115\2\174\1\115\1\175\1\126\33\174\1\126\6\174"+
    "\6\0\1\176\1\177\33\0\1\200\5\0\1\201\2\115"+
    "\1\201\1\115\1\201\1\147\23\201\1\115\7\201\1\147"+
    "\6\201\33\0\1\202\2\0\1\123\50\0\1\123\12\0"+
    "\1\27\2\0\1\27\2\0\25\27\1\0\2\27\1\123"+
    "\1\0\1\27\1\0\7\27\1\126\1\0\2\126\1\0"+
    "\44\126\1\127\1\0\2\127\1\0\44\127\1\203\2\0"+
    "\1\203\1\0\1\204\2\203\1\205\2\203\1\206\2\203"+
    "\1\207\2\203\1\210\4\203\1\211\4\203\1\204\2\203"+
    "\2\204\1\203\1\204\1\212\6\203\1\131\2\0\1\131"+
    "\1\0\1\200\25\131\1\200\2\131\2\200\1\131\1\200"+
    "\2\131\1\212\4\131\1\27\2\0\1\27\2\0\16\27"+
    "\1\213\6\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\13\27\1\214\11\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\20\27"+
    "\1\215\4\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\2\27\1\216\22\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\17\27"+
    "\1\217\5\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\2\27\1\220\4\27\1\221\6\27"+
    "\1\222\6\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\7\27\1\136\15\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\12\27"+
    "\1\223\12\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\10\27\1\224\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\16\27"+
    "\1\225\6\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\6\27\1\226\16\27\1\0\2\27"+
    "\2\0\1\27\1\0\7\27\1\146\2\0\1\146\1\0"+
    "\1\147\24\146\1\227\1\147\2\146\2\147\1\146\1\147"+
    "\7\146\1\147\2\0\1\147\1\0\25\147\1\230\16\147"+
    "\1\0\1\150\47\0\1\27\2\0\1\27\2\0\20\27"+
    "\1\231\4\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\2\27\1\232\22\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\10\27"+
    "\1\233\14\27\1\0\2\27\2\0\1\27\1\0\7\27"+
    "\10\0\1\234\2\0\1\235\2\0\1\236\2\0\1\237"+
    "\4\0\1\240\22\0\1\27\2\0\1\27\2\0\2\27"+
    "\1\241\2\27\1\242\2\27\1\243\2\27\1\244\4\27"+
    "\1\245\4\27\1\0\2\27\2\0\1\27\1\0\7\27"+
    "\1\70\1\0\1\70\1\160\1\0\3\70\1\246\2\70"+
    "\1\247\2\70\1\250\2\70\1\251\4\70\1\252\22\70"+
    "\1\162\1\0\1\70\1\163\1\0\25\162\1\253\16\162"+
    "\1\104\1\0\1\104\1\165\1\0\3\104\1\254\2\104"+
    "\1\255\2\104\1\256\2\104\1\257\4\104\1\260\23\104"+
    "\1\0\1\104\1\165\1\0\17\104\1\261\24\104\1\170"+
    "\1\0\1\104\1\171\1\0\25\170\1\262\16\170\1\111"+
    "\1\0\2\111\2\0\2\111\1\263\2\111\1\264\2\111"+
    "\1\265\2\111\1\266\4\111\1\267\22\111\1\173\1\0"+
    "\1\111\1\173\1\0\1\147\24\173\1\270\16\173\1\174"+
    "\1\115\2\174\1\115\1\174\1\126\33\174\1\126\6\174"+
    "\1\175\1\115\2\175\1\115\1\175\1\127\33\175\1\127"+
    "\6\175\1\204\2\0\1\204\1\0\3\204\1\271\2\204"+
    "\1\272\2\204\1\273\2\204\1\274\4\204\1\275\13\204"+
    "\1\276\6\204\1\200\2\0\1\200\1\0\37\200\1\276"+
    "\4\200\1\201\2\115\1\201\1\115\1\201\1\147\23\201"+
    "\1\277\7\201\1\147\6\201\1\203\2\0\1\203\1\0"+
    "\1\204\25\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\6\203\1\204\2\0\1\204\1\0\35\204\1\276\6\204"+
    "\1\203\2\0\1\203\1\0\1\204\3\203\1\300\21\203"+
    "\1\204\2\203\2\204\1\203\1\204\1\212\7\203\2\0"+
    "\1\203\1\0\1\204\6\203\1\301\1\203\1\302\14\203"+
    "\1\204\2\203\2\204\1\203\1\204\1\212\7\203\2\0"+
    "\1\203\1\0\1\204\7\203\1\303\15\203\1\204\2\203"+
    "\2\204\1\203\1\204\1\212\7\203\2\0\1\203\1\0"+
    "\1\204\14\203\1\304\10\203\1\204\2\203\2\204\1\203"+
    "\1\204\1\212\7\203\2\0\1\203\1\0\1\204\6\203"+
    "\1\305\16\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\6\203\1\27\2\0\1\27\2\0\10\27\1\306\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\2\27\1\307\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\4\27\1\310\20\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\3\27\1\311\21\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\15\27\1\312\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\25\27\1\0\2\27\2\0\1\27\1\0\5\27"+
    "\1\313\2\27\2\0\1\27\2\0\2\27\1\314\13\27"+
    "\1\315\6\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\2\27\1\316\22\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\10\27"+
    "\1\317\14\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\25\27\1\0\2\27\2\0\1\27"+
    "\1\0\4\27\1\320\3\27\2\0\1\27\2\0\2\27"+
    "\1\321\22\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\21\27\1\322\3\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\4\27"+
    "\1\323\20\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\3\27\1\324\21\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\25\27"+
    "\1\0\2\27\2\0\1\27\1\0\4\27\1\325\2\27"+
    "\11\0\1\326\53\0\1\327\1\0\1\330\47\0\1\331"+
    "\55\0\1\332\42\0\1\333\34\0\1\27\2\0\1\27"+
    "\2\0\3\27\1\334\21\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\6\27\1\335\1\27"+
    "\1\336\14\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\7\27\1\337\15\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\14\27"+
    "\1\340\10\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\6\27\1\341\16\27\1\0\2\27"+
    "\2\0\1\27\1\0\7\27\1\70\1\0\1\70\1\160"+
    "\1\0\4\70\1\342\40\70\1\0\1\70\1\160\1\0"+
    "\7\70\1\343\1\70\1\344\33\70\1\0\1\70\1\160"+
    "\1\0\10\70\1\345\34\70\1\0\1\70\1\160\1\0"+
    "\15\70\1\346\27\70\1\0\1\70\1\160\1\0\7\70"+
    "\1\347\34\70\1\104\1\0\1\104\1\165\1\0\4\104"+
    "\1\350\40\104\1\0\1\104\1\165\1\0\7\104\1\351"+
    "\1\104\1\352\33\104\1\0\1\104\1\165\1\0\10\104"+
    "\1\353\34\104\1\0\1\104\1\165\1\0\15\104\1\354"+
    "\27\104\1\0\1\104\1\165\1\0\7\104\1\355\35\104"+
    "\1\0\1\104\1\165\1\0\3\104\1\356\40\104\1\111"+
    "\1\0\2\111\2\0\3\111\1\357\40\111\1\0\2\111"+
    "\2\0\6\111\1\360\1\111\1\361\33\111\1\0\2\111"+
    "\2\0\7\111\1\362\34\111\1\0\2\111\2\0\14\111"+
    "\1\363\27\111\1\0\2\111\2\0\6\111\1\364\34\111"+
    "\1\204\2\0\1\204\1\0\4\204\1\365\30\204\1\276"+
    "\7\204\2\0\1\204\1\0\7\204\1\366\1\204\1\367"+
    "\23\204\1\276\7\204\2\0\1\204\1\0\10\204\1\370"+
    "\24\204\1\276\7\204\2\0\1\204\1\0\15\204\1\371"+
    "\17\204\1\276\7\204\2\0\1\204\1\0\7\204\1\372"+
    "\25\204\1\276\6\204\1\203\2\0\1\203\1\0\1\204"+
    "\3\203\1\373\21\203\1\204\2\203\2\204\1\203\1\204"+
    "\1\212\7\203\2\0\1\203\1\0\1\204\3\203\1\374"+
    "\21\203\1\204\2\203\2\204\1\203\1\204\1\212\7\203"+
    "\2\0\1\203\1\0\1\204\15\203\1\375\7\203\1\204"+
    "\2\203\2\204\1\203\1\204\1\212\7\203\2\0\1\203"+
    "\1\0\1\204\12\203\1\376\12\203\1\204\2\203\2\204"+
    "\1\203\1\204\1\212\7\203\2\0\1\203\1\0\1\204"+
    "\2\203\1\377\22\203\1\204\2\203\2\204\1\203\1\204"+
    "\1\212\7\203\2\0\1\203\1\0\1\204\21\203\1\u0100"+
    "\3\203\1\204\2\203\2\204\1\203\1\204\1\212\6\203"+
    "\1\27\2\0\1\27\2\0\12\27\1\u0101\12\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\3\27\1\u0102\21\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\3\27\1\u0103\21\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\22\27\1\u0104\2\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\25\27\1\0\2\27\2\0"+
    "\1\27\1\0\5\27\1\u0105\2\27\2\0\1\27\2\0"+
    "\2\27\1\u0106\22\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\12\27\1\u0107\12\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\7\27\1\u0108\15\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\6\27\1\u0109\16\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\12\27\1\u010a\12\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\14\27\1\u010b\10\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\3\27\1\u010c\21\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\3\27\1\u010d\21\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\6\27\1\u010e\16\27\1\0\2\27\2\0\1\27\1\0"+
    "\7\27\11\0\1\u010f\50\0\1\u0110\62\0\1\u0111\45\0"+
    "\1\u0112\40\0\1\u0113\67\0\1\u0114\21\0\1\27\2\0"+
    "\1\27\2\0\3\27\1\u0115\21\27\1\0\2\27\2\0"+
    "\1\27\1\0\10\27\2\0\1\27\2\0\3\27\1\u0116"+
    "\21\27\1\0\2\27\2\0\1\27\1\0\10\27\2\0"+
    "\1\27\2\0\15\27\1\u0117\7\27\1\0\2\27\2\0"+
    "\1\27\1\0\10\27\2\0\1\27\2\0\12\27\1\u0118"+
    "\12\27\1\0\2\27\2\0\1\27\1\0\10\27\2\0"+
    "\1\27\2\0\2\27\1\u0119\22\27\1\0\2\27\2\0"+
    "\1\27\1\0\10\27\2\0\1\27\2\0\21\27\1\u011a"+
    "\3\27\1\0\2\27\2\0\1\27\1\0\7\27\1\70"+
    "\1\0\1\70\1\160\1\0\4\70\1\u011b\40\70\1\0"+
    "\1\70\1\160\1\0\4\70\1\u011c\40\70\1\0\1\70"+
    "\1\160\1\0\16\70\1\u011d\26\70\1\0\1\70\1\160"+
    "\1\0\13\70\1\u011e\31\70\1\0\1\70\1\160\1\0"+
    "\3\70\1\u011f\41\70\1\0\1\70\1\160\1\0\22\70"+
    "\1\u0120\21\70\1\104\1\0\1\104\1\165\1\0\4\104"+
    "\1\u0121\40\104\1\0\1\104\1\165\1\0\4\104\1\u0122"+
    "\40\104\1\0\1\104\1\165\1\0\16\104\1\u0123\26\104"+
    "\1\0\1\104\1\165\1\0\13\104\1\u0124\31\104\1\0"+
    "\1\104\1\165\1\0\3\104\1\u0125\41\104\1\0\1\104"+
    "\1\165\1\0\22\104\1\u0126\22\104\1\0\1\104\1\165"+
    "\1\0\13\104\1\u0127\30\104\1\111\1\0\2\111\2\0"+
    "\3\111\1\u0128\40\111\1\0\2\111\2\0\3\111\1\u0129"+
    "\40\111\1\0\2\111\2\0\15\111\1\u012a\26\111\1\0"+
    "\2\111\2\0\12\111\1\u012b\31\111\1\0\2\111\2\0"+
    "\2\111\1\u012c\41\111\1\0\2\111\2\0\21\111\1\u012d"+
    "\21\111\1\204\2\0\1\204\1\0\4\204\1\u012e\30\204"+
    "\1\276\7\204\2\0\1\204\1\0\4\204\1\u012f\30\204"+
    "\1\276\7\204\2\0\1\204\1\0\16\204\1\u0130\16\204"+
    "\1\276\7\204\2\0\1\204\1\0\13\204\1\u0131\21\204"+
    "\1\276\7\204\2\0\1\204\1\0\3\204\1\u0132\31\204"+
    "\1\276\7\204\2\0\1\204\1\0\22\204\1\u0133\12\204"+
    "\1\276\6\204\1\203\2\0\1\203\1\0\1\204\4\203"+
    "\1\u0134\20\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\7\203\2\0\1\203\1\0\1\204\7\203\1\u0135\15\203"+
    "\1\204\2\203\2\204\1\203\1\204\1\212\7\203\2\0"+
    "\1\203\1\0\1\204\16\203\1\u0136\6\203\1\204\2\203"+
    "\2\204\1\203\1\204\1\212\7\203\2\0\1\203\1\0"+
    "\1\204\4\203\1\u0137\20\203\1\204\2\203\2\204\1\203"+
    "\1\204\1\212\7\203\2\0\1\203\1\0\1\204\15\203"+
    "\1\u0138\7\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\7\203\2\0\1\203\1\0\1\204\14\203\1\u0139\10\203"+
    "\1\204\2\203\2\204\1\203\1\204\1\212\6\203\1\27"+
    "\2\0\1\27\2\0\21\27\1\u013a\3\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\10\27"+
    "\1\u013b\14\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\16\27\1\u013c\6\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\12\27"+
    "\1\u013d\12\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\2\27\1\u013e\22\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\21\27"+
    "\1\u013f\3\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\10\27\1\u0140\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\21\27"+
    "\1\u0141\3\27\1\0\2\27\2\0\1\27\1\0\10\27"+
    "\2\0\1\27\2\0\10\27\1\u0142\14\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\21\27"+
    "\1\u0143\3\27\1\0\2\27\2\0\1\27\1\0\7\27"+
    "\12\0\1\u0144\53\0\1\u0145\57\0\1\u0146\36\0\1\u0147"+
    "\61\0\1\u0148\47\0\1\u0149\26\0\1\27\2\0\1\27"+
    "\2\0\4\27\1\u014a\20\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\7\27\1\u014b\15\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\16\27\1\u014c\6\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\4\27\1\u014d\20\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\15\27\1\u014e\7\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\14\27\1\u014f\10\27"+
    "\1\0\2\27\2\0\1\27\1\0\7\27\1\70\1\0"+
    "\1\70\1\160\1\0\5\70\1\u0150\37\70\1\0\1\70"+
    "\1\160\1\0\10\70\1\u0151\34\70\1\0\1\70\1\160"+
    "\1\0\17\70\1\u0152\25\70\1\0\1\70\1\160\1\0"+
    "\5\70\1\u0153\37\70\1\0\1\70\1\160\1\0\16\70"+
    "\1\u0154\26\70\1\0\1\70\1\160\1\0\15\70\1\u0155"+
    "\26\70\1\104\1\0\1\104\1\165\1\0\5\104\1\u0156"+
    "\37\104\1\0\1\104\1\165\1\0\10\104\1\u0157\34\104"+
    "\1\0\1\104\1\165\1\0\17\104\1\u0158\25\104\1\0"+
    "\1\104\1\165\1\0\5\104\1\u0159\37\104\1\0\1\104"+
    "\1\165\1\0\16\104\1\u015a\26\104\1\0\1\104\1\165"+
    "\1\0\15\104\1\u015b\26\104\1\111\1\0\2\111\2\0"+
    "\4\111\1\u015c\37\111\1\0\2\111\2\0\7\111\1\u015d"+
    "\34\111\1\0\2\111\2\0\16\111\1\u015e\25\111\1\0"+
    "\2\111\2\0\4\111\1\u015f\37\111\1\0\2\111\2\0"+
    "\15\111\1\u0160\26\111\1\0\2\111\2\0\14\111\1\u0161"+
    "\26\111\1\204\2\0\1\204\1\0\5\204\1\u0162\27\204"+
    "\1\276\7\204\2\0\1\204\1\0\10\204\1\u0163\24\204"+
    "\1\276\7\204\2\0\1\204\1\0\17\204\1\u0164\15\204"+
    "\1\276\7\204\2\0\1\204\1\0\5\204\1\u0165\27\204"+
    "\1\276\7\204\2\0\1\204\1\0\16\204\1\u0166\16\204"+
    "\1\276\7\204\2\0\1\204\1\0\15\204\1\u0167\17\204"+
    "\1\276\6\204\1\203\2\0\1\203\1\0\1\204\3\203"+
    "\1\u0168\21\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\7\203\2\0\1\203\1\0\1\204\10\203\1\u0169\14\203"+
    "\1\204\2\203\2\204\1\203\1\204\1\212\7\203\2\0"+
    "\1\203\1\0\1\204\17\203\1\u016a\5\203\1\204\2\203"+
    "\2\204\1\203\1\204\1\212\7\203\2\0\1\203\1\0"+
    "\1\204\15\203\1\u016b\7\203\1\204\2\203\2\204\1\203"+
    "\1\204\1\212\7\203\2\0\1\203\1\0\1\204\13\203"+
    "\1\u016c\11\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\6\203\1\27\2\0\1\27\2\0\16\27\1\u016d\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\2\27\1\u016e\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\2\27\1\u016f\22\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\7\27\1\u0170\15\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\16\27\1\u0171\6\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\2\27\1\u0172\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\11\0\1\u0173\55\0\1\u0174\57\0\1\u0175"+
    "\46\0\1\u0176\46\0\1\u0177\27\0\1\27\2\0\1\27"+
    "\2\0\3\27\1\u0178\21\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\10\27\1\u0179\14\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\17\27\1\u017a\5\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\15\27\1\u017b\7\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\13\27\1\u017c\11\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\1\70\1\0\1\70\1\160\1\0\4\70"+
    "\1\u017d\40\70\1\0\1\70\1\160\1\0\11\70\1\u017e"+
    "\33\70\1\0\1\70\1\160\1\0\20\70\1\u017f\24\70"+
    "\1\0\1\70\1\160\1\0\16\70\1\u0180\26\70\1\0"+
    "\1\70\1\160\1\0\14\70\1\u0181\27\70\1\104\1\0"+
    "\1\104\1\165\1\0\4\104\1\u0182\40\104\1\0\1\104"+
    "\1\165\1\0\11\104\1\u0183\33\104\1\0\1\104\1\165"+
    "\1\0\20\104\1\u0184\24\104\1\0\1\104\1\165\1\0"+
    "\16\104\1\u0185\26\104\1\0\1\104\1\165\1\0\14\104"+
    "\1\u0186\27\104\1\111\1\0\2\111\2\0\3\111\1\u0187"+
    "\40\111\1\0\2\111\2\0\10\111\1\u0188\33\111\1\0"+
    "\2\111\2\0\17\111\1\u0189\24\111\1\0\2\111\2\0"+
    "\15\111\1\u018a\26\111\1\0\2\111\2\0\13\111\1\u018b"+
    "\27\111\1\204\2\0\1\204\1\0\4\204\1\u018c\30\204"+
    "\1\276\7\204\2\0\1\204\1\0\11\204\1\u018d\23\204"+
    "\1\276\7\204\2\0\1\204\1\0\20\204\1\u018e\14\204"+
    "\1\276\7\204\2\0\1\204\1\0\16\204\1\u018f\16\204"+
    "\1\276\7\204\2\0\1\204\1\0\14\204\1\u0190\20\204"+
    "\1\276\6\204\1\203\2\0\1\203\1\0\1\204\7\203"+
    "\1\u0191\15\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\7\203\2\0\1\203\1\0\1\204\6\203\1\u0192\16\203"+
    "\1\204\2\203\2\204\1\203\1\204\1\212\7\203\2\0"+
    "\1\203\1\0\1\204\22\203\1\u0193\2\203\1\204\2\203"+
    "\2\204\1\203\1\204\1\212\6\203\1\27\2\0\1\27"+
    "\2\0\2\27\1\u0194\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\2\27\1\u0195\22\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\2\27\1\u0196\22\27\1\0\2\27\2\0\1\27"+
    "\1\0\7\27\15\0\1\u0197\47\0\1\u0198\64\0\1\u0199"+
    "\20\0\1\27\2\0\1\27\2\0\7\27\1\u019a\15\27"+
    "\1\0\2\27\2\0\1\27\1\0\10\27\2\0\1\27"+
    "\2\0\6\27\1\u019b\16\27\1\0\2\27\2\0\1\27"+
    "\1\0\10\27\2\0\1\27\2\0\22\27\1\u019c\2\27"+
    "\1\0\2\27\2\0\1\27\1\0\7\27\1\70\1\0"+
    "\1\70\1\160\1\0\10\70\1\u019d\34\70\1\0\1\70"+
    "\1\160\1\0\7\70\1\u019e\35\70\1\0\1\70\1\160"+
    "\1\0\23\70\1\u019f\20\70\1\104\1\0\1\104\1\165"+
    "\1\0\10\104\1\u01a0\34\104\1\0\1\104\1\165\1\0"+
    "\7\104\1\u01a1\35\104\1\0\1\104\1\165\1\0\23\104"+
    "\1\u01a2\20\104\1\111\1\0\2\111\2\0\7\111\1\u01a3"+
    "\34\111\1\0\2\111\2\0\6\111\1\u01a4\35\111\1\0"+
    "\2\111\2\0\22\111\1\u01a5\20\111\1\204\2\0\1\204"+
    "\1\0\10\204\1\u01a6\24\204\1\276\7\204\2\0\1\204"+
    "\1\0\7\204\1\u01a7\25\204\1\276\7\204\2\0\1\204"+
    "\1\0\23\204\1\u01a8\11\204\1\276\6\204\1\203\2\0"+
    "\1\203\1\0\1\204\11\203\1\u01a9\13\203\1\204\2\203"+
    "\2\204\1\203\1\204\1\212\7\203\2\0\1\203\1\0"+
    "\1\204\3\203\1\u01aa\21\203\1\204\2\203\2\204\1\203"+
    "\1\204\1\212\7\203\2\0\1\203\1\0\1\204\23\203"+
    "\1\u01ab\1\203\1\204\2\203\2\204\1\203\1\204\1\212"+
    "\6\203\17\0\1\u01ac\42\0\1\u01ad\70\0\1\u01ae\17\0"+
    "\1\27\2\0\1\27\2\0\11\27\1\u01af\13\27\1\0"+
    "\2\27\2\0\1\27\1\0\10\27\2\0\1\27\2\0"+
    "\3\27\1\u01b0\21\27\1\0\2\27\2\0\1\27\1\0"+
    "\10\27\2\0\1\27\2\0\23\27\1\u01b1\1\27\1\0"+
    "\2\27\2\0\1\27\1\0\7\27\1\70\1\0\1\70"+
    "\1\160\1\0\12\70\1\u01b2\32\70\1\0\1\70\1\160"+
    "\1\0\4\70\1\u01b3\40\70\1\0\1\70\1\160\1\0"+
    "\24\70\1\u01b4\17\70\1\104\1\0\1\104\1\165\1\0"+
    "\12\104\1\u01b5\32\104\1\0\1\104\1\165\1\0\4\104"+
    "\1\u01b6\40\104\1\0\1\104\1\165\1\0\24\104\1\u01b7"+
    "\17\104\1\111\1\0\2\111\2\0\11\111\1\u01b8\32\111"+
    "\1\0\2\111\2\0\3\111\1\u01b9\40\111\1\0\2\111"+
    "\2\0\23\111\1\u01ba\17\111\1\204\2\0\1\204\1\0"+
    "\12\204\1\u01bb\22\204\1\276\7\204\2\0\1\204\1\0"+
    "\4\204\1\u01bc\30\204\1\276\7\204\2\0\1\204\1\0"+
    "\24\204\1\u01bd\10\204\1\276\6\204\1\203\2\0\1\203"+
    "\1\0\1\204\16\203\1\u01be\6\203\1\204\2\203\2\204"+
    "\1\203\1\204\1\212\7\203\2\0\1\203\1\0\1\204"+
    "\13\203\1\u01bf\11\203\1\204\2\203\2\204\1\203\1\204"+
    "\1\212\6\203\24\0\1\u01c0\45\0\1\u01c1\27\0\1\27"+
    "\2\0\1\27\2\0\16\27\1\u01c2\6\27\1\0\2\27"+
    "\2\0\1\27\1\0\10\27\2\0\1\27\2\0\13\27"+
    "\1\u01c3\11\27\1\0\2\27\2\0\1\27\1\0\7\27"+
    "\1\70\1\0\1\70\1\160\1\0\17\70\1\u01c4\25\70"+
    "\1\0\1\70\1\160\1\0\14\70\1\u01c5\27\70\1\104"+
    "\1\0\1\104\1\165\1\0\17\104\1\u01c6\25\104\1\0"+
    "\1\104\1\165\1\0\14\104\1\u01c7\27\104\1\111\1\0"+
    "\2\111\2\0\16\111\1\u01c8\25\111\1\0\2\111\2\0"+
    "\13\111\1\u01c9\27\111\1\204\2\0\1\204\1\0\17\204"+
    "\1\u01ca\15\204\1\276\7\204\2\0\1\204\1\0\14\204"+
    "\1\u01cb\20\204\1\276\6\204\1\203\2\0\1\203\1\0"+
    "\1\204\21\203\1\u01cc\3\203\1\204\2\203\2\204\1\203"+
    "\1\204\1\212\6\203\27\0\1\u01cd\21\0\1\27\2\0"+
    "\1\27\2\0\21\27\1\u01ce\3\27\1\0\2\27\2\0"+
    "\1\27\1\0\7\27\1\70\1\0\1\70\1\160\1\0"+
    "\22\70\1\u01cf\21\70\1\104\1\0\1\104\1\165\1\0"+
    "\22\104\1\u01d0\21\104\1\111\1\0\2\111\2\0\21\111"+
    "\1\u01d1\21\111\1\204\2\0\1\204\1\0\22\204\1\u01d2"+
    "\12\204\1\276\6\204";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\26\0\15\1\1\11\16\1\1\11\3\1\1\11\11\1"+
    "\1\11\16\1\1\11\2\1\1\11\23\1\1\0\1\11"+
    "\5\1\1\0\1\1\1\0\2\1\3\0\3\1\1\0"+
    "\4\1\1\11\2\0\1\1\1\0\1\1\1\0\23\1"+
    "\1\11\3\1\5\0\30\1\5\0\1\11\27\1\6\0"+
    "\31\1\6\0\24\1\6\0\31\1\6\0\20\1\3\0"+
    "\1\11\2\0\30\1\3\0\1\1\2\0\13\1\1\11"+
    "\2\0\1\11\1\0\25\1\2\0\1\1\1\0\6\1"+
    "\3\0\14\1\3\0\3\1\1\11\2\0\15\1\2\0"+
    "\2\1\1\11\1\0\11\1\1\0\1\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':  // fall though
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case PREREQUISITES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 467: break;
            case INCLUDES: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 468: break;
            case EXPORT: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 469: break;
            case EXPORTVAR: {
              yypushback(yylength()); yybegin(YYINITIAL); return EOL;
            }  // fall though
            case 470: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return IDENTIFIER;
            } 
            // fall through
          case 51: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 52: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 53: break;
          case 4: 
            { yybegin(PREREQUISITES); return COLON;
            } 
            // fall through
          case 54: break;
          case 5: 
            { yybegin(SOURCE); return ASSIGN;
            } 
            // fall through
          case 55: break;
          case 6: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 7: 
            { yybegin(SOURCE); return TAB;
            } 
            // fall through
          case 57: break;
          case 8: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 58: break;
          case 9: 
            { return COLON;
            } 
            // fall through
          case 59: break;
          case 10: 
            { yybegin(SOURCE); return SEMICOLON;
            } 
            // fall through
          case 60: break;
          case 11: 
            { return PIPE;
            } 
            // fall through
          case 61: break;
          case 12: 
            { yypushback(yylength()); yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 13: 
            { return LINE;
            } 
            // fall through
          case 63: break;
          case 14: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 15: 
            { yybegin(DEFINEBODY); return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 16: 
            { return ASSIGN;
            } 
            // fall through
          case 66: break;
          case 17: 
            { return VARIABLE_VALUE_LINE;
            } 
            // fall through
          case 67: break;
          case 18: 
            { yybegin(YYINITIAL); return CONDITION;
            } 
            // fall through
          case 68: break;
          case 19: 
            { return FUNCTION_PARAM_TEXT;
            } 
            // fall through
          case 69: break;
          case 20: 
            { yybegin(YYINITIAL); return FUNCTION_END;
            } 
            // fall through
          case 70: break;
          case 21: 
            { yybegin(EXPORTVAR); return ASSIGN;
            } 
            // fall through
          case 71: break;
          case 22: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 72: break;
          case 23: 
            { yybegin(PREREQUISITES); return DOUBLECOLON;
            } 
            // fall through
          case 73: break;
          case 24: 
            { return SPLIT;
            } 
            // fall through
          case 74: break;
          case 25: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 75: break;
          case 26: 
            { return VARIABLE_USAGE;
            } 
            // fall through
          case 76: break;
          case 27: 
            { return MACRO;
            } 
            // fall through
          case 77: break;
          case 28: 
            { yybegin(ELSE); return KEYWORD_ELSE;
            } 
            // fall through
          case 78: break;
          case 29: 
            { yybegin(CONDITIONALS); return KEYWORD_IFEQ;
            } 
            // fall through
          case 79: break;
          case 30: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 80: break;
          case 31: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNEQ;
            } 
            // fall through
          case 81: break;
          case 32: 
            { yybegin(CONDITIONALS); return KEYWORD_IFDEF;
            } 
            // fall through
          case 82: break;
          case 33: 
            { yybegin(INCLUDES); return KEYWORD_VPATH;
            } 
            // fall through
          case 83: break;
          case 34: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 84: break;
          case 35: 
            { yybegin(FUNCTION); return FUNCTION_INFO;
            } 
            // fall through
          case 85: break;
          case 36: 
            { yybegin(EXPORT); return KEYWORD_EXPORT;
            } 
            // fall through
          case 86: break;
          case 37: 
            { yybegin(CONDITIONALS); return KEYWORD_IFNDEF;
            } 
            // fall through
          case 87: break;
          case 38: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 88: break;
          case 39: 
            { yybegin(YYINITIAL); return KEYWORD_EXPORT;
            } 
            // fall through
          case 89: break;
          case 40: 
            { yybegin(FUNCTION); return FUNCTION_ERROR;
            } 
            // fall through
          case 90: break;
          case 41: 
            { yybegin(FUNCTION); return FUNCTION_SHELL;
            } 
            // fall through
          case 91: break;
          case 42: 
            { yybegin(INCLUDES); return KEYWORD_INCLUDE;
            } 
            // fall through
          case 92: break;
          case 43: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 93: break;
          case 44: 
            { yybegin(YYINITIAL); return KEYWORD_PRIVATE;
            } 
            // fall through
          case 94: break;
          case 45: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 95: break;
          case 46: 
            { yybegin(INCLUDES); return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 96: break;
          case 47: 
            { yybegin(YYINITIAL); return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 97: break;
          case 48: 
            { yybegin(FUNCTION); return FUNCTION_WARNING;
            } 
            // fall through
          case 98: break;
          case 49: 
            { yybegin(FUNCTION); return FUNCTION_WILDCARD;
            } 
            // fall through
          case 99: break;
          case 50: 
            { yybegin(FUNCTION); return FUNCTION_PATHSUBST;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
